"""Loader for calibration file."""

from construct import (
    Struct,
    Int8ul,
    Int16sl,
    Int16ul,
    Int32ul,
    Int64sl,
    Float32l,
    Padding,
    Array,
    Bytes,
    Int32sl,
    Container,
)

calibration_data_structure = Struct(
    "version" / Array(3, Int8ul),
    Padding(5),
    "calibration_data_version" / Int64sl,
    "calib_stage_one" / Int64sl,
    "calib_stage_two" / Int64sl,
    "chip_ident" / Bytes(24),
    "revision" / Array(2, Int8ul),
    "sensor_channel_order" / Array(64, Int8ul),
    Padding(2),
    "sensor" / Array(25664, Float32l),
    "sensor_temperature" / Array(4, Float32l),
    "leds" / Array(2406, Float32l),
    "leds_temperature" / Array(24, Float32l),
    "leds_current" / Array(6, Float32l),
    "power_distribution" / Array(960, Float32l),
    "power_distribution_temperature" / Array(15, Float32l),
    "power_distribution_distance" / Array(15, Float32l),
    "white" / Array(192, Float32l),
    "white_reference" / Array(1203, Float32l),
    "white_temperature" / Array(12, Float32l),
    "white_distance" / Array(3, Float32l),
    "black" / Array(192, Float32l),
    "black_ref" / Array(1203, Float32l),
    "black_temperature" / Array(12, Float32l),
    "black_distance" / Array(3, Float32l),
    "sensor_gain" / Array(64, Int8ul),
    "sensor_integration" / Int32ul,
    "ltf_wait_time" / Int32ul,
    "led_setting" / Array(5, Int8ul),
    "led_current" / Int8ul,
    "led_wait_time" / Int8ul,
    "temperature_index" / Array(4, Int8ul),
    "device_id" / Bytes(24),
    Padding(1),
    "device_white" / Array(384, Float32l),
    "dev_white_ref" / Array(401, Float32l),
    "dev_white_temperature" / Array(24, Float32l),
    "dev_white_distance" / Float32l,
    "dev_black" / Array(384, Float32l),
    "dev_black_ref" / Array(401, Float32l),
    "dev_black_temperature" / Array(24, Float32l),
    "dev_black_distance" / Float32l,
    "dev_ambient_temperature" / Array(5, Float32l),
    "dev_sample" / Array(3840, Float32l),
    "dev_sample_ref" / Array(4010, Float32l),
    "dev_sample_temperature" / Array(240, Float32l),
    "dev_sample_distance" / Array(10, Float32l),
    "dev_cal_matrix" / Array(25664, Float32l),
    "dev_cal_matrix_temperature" / Array(4, Float32l),
    "dev_temp_coeff" / Array(46080, Float32l),
    "dev_temp_coeff_temperature" / Array(2880, Float32l),
    "dev_temp_coeff_poly" / Array(2304, Float32l),
    "dev_temp_coeff_az_poly" / Array(68, Float32l),
    "dev_power_distribution" / Array(384, Float32l),
    "dev_power_distribution_temperature" / Array(24, Float32l),
    "dev_power_distribution_distance" / Array(6, Float32l),
    "configuration_data"
    / Struct(
        "dev_sen_gain" / Array(64, Int8ul),
        "dev_sen_integration" / Int32sl,
        "dev_ltf_wait_time" / Int32sl,
        "dev_led_setting" / Array(5, Int8ul),
        "dev_led_current" / Int8ul,
        "dev_led_wait_time" / Int8ul,
        "dev_temperature_index" / Array(4, Int8ul),
        Padding(1),
        "temperature_cal" / Array(14, Float32l),
        "temperature" / Array(7, Float32l),
        "auto_zero" / Array(16, Int16ul),
        "auto_zero_enable" / Int8ul,
        "auto_zero_comp_mode" / Int8ul,
        Padding(2),
        "auto_zero_comp_k" / Float32l,
        "auto_zero_comp_k0" / Float32l,
        "coeff" / Array(16, Float32l),
        "k_temp" / Float32l,
        "meas_sequence_pid_lut" / Array(10, Float32l),
        "meas_sequence"
        / Array(
            15,
            Struct(
                "count" / Int8ul,
                "led_mult" / Int8ul,
                "pid_opt" / Int8ul,
            ),
        ),
        "pid_factory_calibration"
        / Struct(
            Padding(3),
            "count" / Int8ul,
            Padding(3),
            "temp_start" / Float32l,
            "temp_slope" / Float32l,
            "temp_end" / Float32l,
            "pid_config_struct"
            / Struct(
                "kp" / Float32l,
                "ki" / Float32l,
                "kd" / Float32l,
                "kc" / Float32l,
                "ui" / Float32l,
                "up" / Float32l,
                "up1" / Float32l,
                "ud" / Float32l,
                "select_algorithm" / Int8ul,
                "initialized" / Int8ul,
                Padding(2),
                "count_max" / Int32sl,
                "error_max" / Float32l,
                "in_range_max_count" / Int32ul,
                "error" / Float32l,
                "error1" / Float32l,
                "sat_error" / Float32l,
                "count" / Int32sl,
                "in_range_count" / Int32sl,
                "input_min" / Float32l,
                "input_max" / Float32l,
                "output_min" / Float32l,
                "output_max" / Float32l,
                "output0" / Float32l,
                "result_last" / Int16sl,
                Padding(4),
                "set_temperature" / Float32l,
            ),
        ),
    ),
    Padding(8),
    "checksum" / Int64sl,
)


def parse_calib_file(file_path: str) -> Container:
    with open(file_path, "rb") as file:
        data = calibration_data_structure.parse(file.read())
    return data
